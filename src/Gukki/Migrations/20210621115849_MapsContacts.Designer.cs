// <auto-generated />
using Gukki.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Gukki.Migrations
{
    [DbContext(typeof(GukkiDbContext))]
    [Migration("20210621115849_MapsContacts")]
    partial class MapsContacts
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("Gukki.Models.ContactModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contact_name");

                    b.Property<string>("ContactText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contact_text");

                    b.Property<int>("PlaceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Gukki.Models.MapsContactModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_address");

                    b.Property<string>("MapsURL")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("maps_url");

                    b.HasKey("Id");

                    b.ToTable("MapContacts");
                });

            modelBuilder.Entity("Gukki.Models.PlaceModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BlockName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("block_name");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city_name");

                    b.Property<int>("MapsContactId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MapsContactId")
                        .IsUnique();

                    b.ToTable("Places");
                });

            modelBuilder.Entity("Gukki.Models.ProductModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Gukki.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CloseTime")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("close_time");

                    b.Property<string>("OpenTime")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("open_time");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("integer")
                        .HasColumnName("order_index");

                    b.Property<string>("WeekdayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("weekday_name");

                    b.HasKey("Id");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("Gukki.Models.ContactModel", b =>
                {
                    b.HasOne("Gukki.Models.PlaceModel", "Place")
                        .WithMany("Contacts")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("Gukki.Models.PlaceModel", b =>
                {
                    b.HasOne("Gukki.Models.MapsContactModel", "MapsContact")
                        .WithOne("Place")
                        .HasForeignKey("Gukki.Models.PlaceModel", "MapsContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MapsContact");
                });

            modelBuilder.Entity("Gukki.Models.MapsContactModel", b =>
                {
                    b.Navigation("Place");
                });

            modelBuilder.Entity("Gukki.Models.PlaceModel", b =>
                {
                    b.Navigation("Contacts");
                });
#pragma warning restore 612, 618
        }
    }
}
